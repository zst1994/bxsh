// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_bxsh/model/base_entity_helper.dart';
import 'package:flutter_bxsh/model/on_launch_mini_entity.dart';
import 'package:flutter_bxsh/generated/json/on_launch_mini_entity_helper.dart';
import 'package:flutter_bxsh/model/basic_picture_orders_sum_fsize_entity.dart';
import 'package:flutter_bxsh/generated/json/basic_picture_orders_sum_fsize_entity_helper.dart';
import 'package:flutter_bxsh/model/base_entity.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case OnLaunchMiniEntity:
				return onLaunchMiniEntityFromJson(data as OnLaunchMiniEntity, json) as T;
			case OnLaunchMiniSharePic:
				return onLaunchMiniSharePicFromJson(data as OnLaunchMiniSharePic, json) as T;
			case OnLaunchMiniSendFee:
				return onLaunchMiniSendFeeFromJson(data as OnLaunchMiniSendFee, json) as T;
			case BasicPictureOrdersSumFsizeEntity:
				return basicPictureOrdersSumFsizeEntityFromJson(data as BasicPictureOrdersSumFsizeEntity, json) as T;
			case BaseEntity:
				return baseEntityFromJson(data as BaseEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case OnLaunchMiniEntity:
				return onLaunchMiniEntityToJson(data as OnLaunchMiniEntity);
			case OnLaunchMiniSharePic:
				return onLaunchMiniSharePicToJson(data as OnLaunchMiniSharePic);
			case OnLaunchMiniSendFee:
				return onLaunchMiniSendFeeToJson(data as OnLaunchMiniSendFee);
			case BasicPictureOrdersSumFsizeEntity:
				return basicPictureOrdersSumFsizeEntityToJson(data as BasicPictureOrdersSumFsizeEntity);
			case BaseEntity:
				return baseEntityToJson(data as BaseEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (OnLaunchMiniEntity).toString()){
			return OnLaunchMiniEntity().fromJson(json);
		}	else if(type == (OnLaunchMiniSharePic).toString()){
			return OnLaunchMiniSharePic().fromJson(json);
		}	else if(type == (OnLaunchMiniSendFee).toString()){
			return OnLaunchMiniSendFee().fromJson(json);
		}	else if(type == (BasicPictureOrdersSumFsizeEntity).toString()){
			return BasicPictureOrdersSumFsizeEntity().fromJson(json);
		}	else if(type == (BaseEntity).toString()){
			return BaseEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<OnLaunchMiniEntity>() is M){
			return data.map<OnLaunchMiniEntity>((e) => OnLaunchMiniEntity().fromJson(e)).toList() as M;
		}	else if(List<OnLaunchMiniSharePic>() is M){
			return data.map<OnLaunchMiniSharePic>((e) => OnLaunchMiniSharePic().fromJson(e)).toList() as M;
		}	else if(List<OnLaunchMiniSendFee>() is M){
			return data.map<OnLaunchMiniSendFee>((e) => OnLaunchMiniSendFee().fromJson(e)).toList() as M;
		}	else if(List<BasicPictureOrdersSumFsizeEntity>() is M){
			return data.map<BasicPictureOrdersSumFsizeEntity>((e) => BasicPictureOrdersSumFsizeEntity().fromJson(e)).toList() as M;
		}	else if(List<BaseEntity>() is M){
			return data.map<BaseEntity>((e) => BaseEntity().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}